{"version":3,"sources":["serviceWorker.js","features/board/components/util/board.Reducer.js","features/root/rootReducer.js","features/board/components/util/board.saga.js","features/root/rootSaga.js","features/board/components/CreateListButton.jsx","features/board/components/List.jsx","features/board/components/Board.jsx","index.js"],"names":["Boolean","window","location","hostname","match","initializeBoardStart","createAction","payload","initializeBoardSuccess","ids","entities","createListStart","id","title","reducer","createReducer","type","state","action","newList","cardIds","cardEntities","push","selectBoardIds","boardReducer","selectBoards","rootReducer","combineReducers","syncBoard","loadBoard","watchBoardSaga","save","localStorage","setItem","JSON","stringify","load","getItem","parse","select","call","put","all","takeEvery","rootSaga","fork","Container","styled","div","CreateListButton","dispatch","useDispatch","useState","onCreate","setOnCreate","setTitle","onClick","autoFocus","onBlur","onChange","e","target","value","onKeyPress","key","newId","uuid","createList","List","useSelector","Board","listIds","console","log","useEffect","map","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c75b85e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createAction, createReducer } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  ids: [],\n  entities: {},\n};\n\nexport const initializeBoardStart = createAction(\n  \"board/initializeBoardStart\",\n  () => {\n    return { payload: null };\n  }\n);\nexport const initializeBoardSuccess = createAction(\n  \"board/initializeBoardSuccess\",\n  (ids, entities) => {\n    return { payload: { ids, entities } };\n  }\n);\n\nexport const createListStart = createAction(\n  \"board/createListStart\",\n  (id, title) => {\n    return { payload: { id, title } };\n  }\n);\n\nconst reducer = createReducer(initialState, {\n  [initializeBoardSuccess.type]: (state, action) => {\n    const { ids, entities } = action.payload;\n    state.ids = ids;\n    state.entities = entities;\n  },\n\n  [createListStart.type]: (state, action) => {\n    const { id, title } = action.payload;\n    const newList = {\n      id,\n      title,\n      cardIds: [],\n      cardEntities: {},\n    };\n    state.ids.push(id);\n    state.entities[id] = newList;\n  },\n});\n\nexport default reducer;\n\nexport const selectBoardIds = (state) => state.boardReducer.ids;\nexport const selectBoards = (state) => state.boardReducer.entities;\n","import { combineReducers } from \"redux\";\nimport boardReducer from \"../board/components/util/board.Reducer\";\n\nconst rootReducer = combineReducers({\n  boardReducer,\n});\n\nexport default rootReducer;\n","import { all, put, call, select, takeEvery } from \"redux-saga/effects\";\nimport {\n  createListStart,\n  initializeBoardStart,\n  initializeBoardSuccess,\n  selectBoardIds,\n  selectBoards,\n} from \"./board.Reducer\";\n\nfunction save(ids, entities) {\n  localStorage.setItem(\"ids\", JSON.stringify(ids));\n  localStorage.setItem(\"entities\", JSON.stringify(entities));\n}\n\nfunction load() {\n  const ids = localStorage.getItem(\"ids\");\n  const entities = localStorage.getItem(\"entities\");\n  return {\n    ids: JSON.parse(ids),\n    entities: JSON.parse(entities),\n  };\n}\n\nexport function* syncBoard() {\n  const ids = yield select(selectBoardIds);\n  const entities = yield select(selectBoards);\n  yield call(save, ids, entities);\n}\n\nexport function* loadBoard() {\n  const { ids, entities } = yield call(load);\n  if (!ids || !entities) return;\n  yield put(initializeBoardSuccess(ids, entities));\n}\n\nexport function* watchBoardSaga() {\n  yield all([\n    takeEvery(createListStart.type, syncBoard),\n    takeEvery(initializeBoardStart.type, loadBoard),\n  ]);\n}\n","import { fork } from \"redux-saga/effects\";\nimport { watchBoardSaga } from \"../board/components/util/board.saga\";\n\nexport default function* rootSaga() {\n  yield fork(watchBoardSaga);\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\nimport { createListStart } from \"./util/board.Reducer\";\n\nconst Container = styled.div`\n  width: 272px;\n  height: 40px;\n  padding: 10px;\n  font-weight: 600;\n  align-items: center;\n  justify-content: center;\n  background-color: black;\n  color: white;\n`;\n\nconst CreateListButton = () => {\n  const dispatch = useDispatch();\n  const [onCreate, setOnCreate] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  function onClick() {\n    setOnCreate(true);\n  }\n  function onBlur() {\n    setOnCreate(false);\n  }\n\n  function createList() {\n    const newId = uuid();\n    dispatch(createListStart(newId, title));\n    setTitle(\"\");\n    setOnCreate(false);\n  }\n\n  function onChange(e) {\n    setTitle(e.target.value);\n  }\n\n  return (\n    <Container onClick={onClick}>\n      {onCreate ? (\n        <input\n          autoFocus\n          onBlur={onBlur}\n          onChange={onChange}\n          value={title}\n          onKeyPress={(e) => {\n            e.key === \"Enter\" && createList();\n          }}\n        ></input>\n      ) : (\n        <span>List 추가하기</span>\n      )}\n    </Container>\n  );\n};\n\nexport default CreateListButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { selectBoards } from \"./util/board.Reducer\";\nimport { useSelector } from \"react-redux\";\nconst Container = styled.div`\n  width: 272px;\n  min-height: 40px;\n  background-color: grey;\n  color: white;\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst List = ({ id }) => {\n  const boards = useSelector(selectBoards);\n  const { title, cardIds } = boards[id];\n\n  return (\n    <Container>\n      <span>{title}</span>\n    </Container>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CreateListButton from \"./CreateListButton\";\nimport { initializeBoardStart, selectBoardIds } from \"./util/board.Reducer\";\nimport { useSelector } from \"react-redux\";\nimport List from \"./List\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: flex-start;\n`;\n\nconst Board = () => {\n  const listIds = useSelector(selectBoardIds);\n  const dispatch = useDispatch();\n  console.log(listIds);\n  useEffect(() => {\n    dispatch(initializeBoardStart());\n  }, [dispatch]);\n  return (\n    <Container>\n      {listIds.map((id) => (\n        <List key={id} id={id} />\n      ))}\n      <CreateListButton />\n    </Container>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./features/root/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./features/root/rootSaga\";\nimport Board from \"./features/board/components/Board\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Board />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}